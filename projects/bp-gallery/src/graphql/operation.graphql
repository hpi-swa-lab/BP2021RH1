# NOTE: this file is auto-generated, edit /projects/bp-graphql/operations instead
query getAllArchiveTags($sortBy: [String] = ["createdAt:asc"]) { archiveTags(sort: $sortBy) { data { id attributes { name shortDescription showcasePicture { data { id attributes { media { data { attributes { url updatedAt } } } } } } } } } }
query getAllCollections { collections(publicationState: PREVIEW) { data { id attributes { name parent_collections(publicationState: PREVIEW) { data { id attributes { name } } } } } } }
query getAllKeywordTags { keywordTags { data { id attributes { name synonyms { name } visible } } } }
query getAllLocationTags { locationTags { data { id attributes { name visible synonyms { name } } } } }
query getAllPersonTags { personTags { data { id attributes { name synonyms { name } } } } }
query getAllPicturesByArchive { archiveTags { data { id attributes { pictures { data { id } } } } } }
query getArchive($archiveId: ID!) { archiveTag(id: $archiveId) { data { id attributes { name shortDescription longDescription logo { data { id attributes { width height formats updatedAt } } } showcasePicture { data { id attributes { media { data { id attributes { width height formats url updatedAt } } } } } } links { data { id attributes { title url } } } } } } }
query getCollectionInfoById($collectionId: ID!) { collection(id: $collectionId) { data { id attributes { name description child_collections(sort: "name:asc" publicationState: PREVIEW) { data { id attributes { name publishedAt pictures(pagination: { limit: 1 }) { data { id } } child_collections(pagination: { limit: 1 } publicationState: PREVIEW) { data { id } } parent_collections(publicationState: PREVIEW) { data { id attributes { name } } } } } } } } } }
query getCollectionInfoByName( $collectionName: String $publicationState: PublicationState = LIVE ) { collections(filters: { name: { eq: $collectionName } } publicationState: $publicationState) { data { id attributes { name description child_collections(sort: "name:asc" publicationState: $publicationState) { data { id attributes { name thumbnail publishedAt } } } } } } }
query getDailyPictureInfo($pictureId: ID!) { picture(id: $pictureId) { data { id attributes { descriptions(sort: "createdAt:asc") { data { id attributes { text } } } time_range_tag { data { id attributes { start end isEstimate } } } comments { data { id } } likes media { data { id attributes { url updatedAt } } } archive_tag { data { id attributes { name } } } } } } }
query getDecadePreviewThumbnails( $filter40s: PictureFiltersInput! $filter50s: PictureFiltersInput! $filter60s: PictureFiltersInput! $filter70s: PictureFiltersInput! $filter80s: PictureFiltersInput! $filter90s: PictureFiltersInput! ) { decade40s: pictures( filters: { and: [$filter40s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } decade50s: pictures( filters: { and: [$filter50s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } decade60s: pictures( filters: { and: [$filter60s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } decade70s: pictures( filters: { and: [$filter70s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } decade80s: pictures( filters: { and: [$filter80s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } decade90s: pictures( filters: { and: [$filter90s { or: [{ is_text: { eq: false } } { is_text: { null: true } }] }] } pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } }
query getFaceTags($pictureId: ID!) { faceTags(filters: { picture: { id: { eq: $pictureId } } }) { data { id attributes { x y person_tag { data { id attributes { name } } } } } } }
query getKeywordTagsWithThumbnail( $filters: KeywordTagFiltersInput = {} $thumbnailFilters: PictureFiltersInput = {} $start: Int $limit: Int $sortBy: [String] ) { keywordTags(filters: $filters pagination: { start: $start limit: $limit } sort: $sortBy) { data { id attributes { name thumbnail: pictures(filters: $thumbnailFilters pagination: { limit: 1 }) { data { attributes { media { data { attributes { formats } } } } } } verified_thumbnail: verified_pictures( filters: $thumbnailFilters pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } } } } }
query getLocationTagsWithThumbnail( $filters: LocationTagFiltersInput = {} $thumbnailFilters: PictureFiltersInput = {} $start: Int $limit: Int $sortBy: [String] ) { locationTags(filters: $filters pagination: { start: $start limit: $limit } sort: $sortBy) { data { id attributes { name thumbnail: pictures(filters: $thumbnailFilters pagination: { limit: 1 }) { data { attributes { media { data { attributes { formats } } } } } } verified_thumbnail: verified_pictures( filters: $thumbnailFilters pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } } } } }
query getMultiplePictureInfo($pictureIds: [ID!]) { pictures(filters: { id: { in: $pictureIds } }) { data { id attributes { descriptions(sort: "createdAt:asc") { data { id attributes { text } } } time_range_tag { data { id attributes { start end isEstimate } } } verified_time_range_tag { data { id attributes { start end isEstimate } } } keyword_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_keyword_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } location_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_location_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } person_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_person_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } collections(publicationState: PREVIEW) { data { id attributes { name } } } media { data { id attributes { url updatedAt } } } comments(publicationState: PREVIEW sort: "date:asc") { data { id attributes { text author date publishedAt pinned } } } is_text linked_pictures { data { id } } linked_texts { data { id } } archive_tag { data { id attributes { name } } } } } } }
query getParameterizedPermissions($userId: ID) { parameterizedPermissions(filters: { users_permissions_user: { id: { eq: $userId } } }) { data { id attributes { operation_name } } } }
query getPersonTag($id: ID!) { personTag(id: $id) { data { attributes { name } } } }
query getPersonTagsWithThumbnail( $filters: PersonTagFiltersInput = {} $thumbnailFilters: PictureFiltersInput = {} $start: Int $limit: Int $sortBy: [String] ) { personTags(filters: $filters pagination: { start: $start limit: $limit } sort: $sortBy) { data { id attributes { name thumbnail: pictures(filters: $thumbnailFilters pagination: { limit: 1 }) { data { attributes { media { data { attributes { formats } } } } } } verified_thumbnail: verified_pictures( filters: $thumbnailFilters pagination: { limit: 1 } ) { data { attributes { media { data { attributes { formats } } } } } } } } } }
query getPictureGeoInfo($pictureId: ID!) { pictureGeoInfos(filters: { picture: { id: { eq: $pictureId } } }) { data { id attributes { latitude longitude radius } } } }
query getPictureInfo($pictureId: ID!) { picture(id: $pictureId) { data { id attributes { descriptions(sort: "createdAt:asc") { data { id attributes { text } } } time_range_tag { data { id attributes { start end isEstimate } } } verified_time_range_tag { data { id attributes { start end isEstimate } } } keyword_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_keyword_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } location_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_location_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } person_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } verified_person_tags(sort: "updatedAt:asc") { data { id attributes { name updatedAt } } } collections(publicationState: PREVIEW) { data { id attributes { name } } } comments( publicationState: PREVIEW sort: "date:desc" filters: { picture: { id: { eq: $pictureId } } } ) { data { id attributes { text author picture { data { id } } date parentComment { data { id } } childComments(publicationState: PREVIEW sort: "date:asc") { data { id } } publishedAt pinned } } } media { data { id attributes { width height formats url updatedAt } } } is_text linked_pictures { data { id } } linked_texts { data { id } } archive_tag { data { id attributes { name } } } likes } } } }
query getPictureMediaInfo($pictureId: ID!) { picture(id: $pictureId) { data { id attributes { media { data { id attributes { width height formats url updatedAt } } } } } } }
query getPictures( $filters: PictureFiltersInput! $pagination: PaginationArg! $sortBy: [String] = ["createdAt:desc"] ) { pictures(filters: $filters pagination: $pagination sort: $sortBy) { data { id attributes { is_text comments { data { id } } likes media { data { id attributes { width height formats url updatedAt } } } } } } }
query getPicturesByAllSearch( $pagination: PaginationArg! $searchTerms: [String]! $searchTimes: [[String]]! $filterOutTexts: Boolean! ) { findPicturesByAllSearch( pagination: $pagination searchTerms: $searchTerms searchTimes: $searchTimes filterOutTexts: $filterOutTexts ) { id attributes { is_text comments { data { id } } likes media { data { id attributes { width height formats url updatedAt } } } } } }
query getPicturesForCollection($collectionId: ID!) { collection(id: $collectionId) { data { id attributes { pictures { data { id } } } } } }
query getPicturesGeoInfo($pictureIds: [ID]!) { pictureGeoInfos(filters: { picture: { id: { in: $pictureIds } } }) { data { id attributes { latitude longitude } } } }
query getRootCollection { browseRootCollection { data { attributes { current { data { id attributes { name } } } } } } }
query getUnverifiedComments { comments(filters: { publishedAt: { null: true } } publicationState: PREVIEW) { data { id attributes { picture { data { id attributes { media { data { id attributes { width height formats updatedAt } } } } } } text author } } } }
query getUsersPermissionsUser($id: ID!) { usersPermissionsUser(id: $id) { data { id attributes { username } } } }
query me { me { role { name } username email } }
mutation acceptComment($commentId: ID! $currentTime: DateTime!) { updateComment(id: $commentId data: { publishedAt: $currentTime }) { data { id } } }
mutation bulkEdit($pictureIds: [ID!]! $data: JSON!) { doBulkEdit(ids: $pictureIds data: $data) }
mutation createArchiveTag($name: String!) { createArchiveTag(data: { name: $name }) { data { id } } }
mutation createFaceTag($pictureId: ID! $personTagId: ID! $x: Float $y: Float) { createFaceTag(data: { picture: $pictureId person_tag: $personTagId x: $x y: $y }) { data { id } } }
mutation createKeywordTag($name: String!) { createKeywordTag(data: { name: $name }) { data { id } } }
mutation createLink($title: String! $url: String! $archive_tag: ID!) { createLink(data: { title: $title url: $url archive_tag: $archive_tag }) { data { id } } }
mutation createLocationTag($name: String!) { createLocationTag(data: { name: $name }) { data { id } } }
mutation createParameterizedPermission($userId: ID $operationName: String!) { createParameterizedPermission( data: { users_permissions_user: $userId operation_name: $operationName } ) { data { id } } }
mutation createPersonTag($name: String!) { createPersonTag(data: { name: $name }) { data { id } } }
mutation createPicture($data: PictureInput!) { createPicture(data: $data) { data { id } } }
mutation createPictureGeoInfo($data: PictureGeoInfoInput!) { createPictureGeoInfo(data: $data) { data { id } } }
mutation createSubCollection($name: String! $parentId: ID! $publishedAt: DateTime!) { createCollection( data: { name: $name parent_collections: [$parentId] publishedAt: $publishedAt } ) { data { id } } }
mutation declineComment($commentId: ID!) { deleteComment(id: $commentId) { data { id } } }
mutation deleteCollection($collectionId: ID!) { deleteCollection(id: $collectionId) { data { id } } }
mutation deleteFaceTag($id: ID!) { deleteFaceTag(id: $id) { data { id } } }
mutation deleteKeywordTag($id: ID!) { deleteKeywordTag(id: $id) { data { id } } }
mutation deleteLink($id: ID!) { deleteLink(id: $id) { data { id } } }
mutation deleteLocationTag($id: ID!) { deleteLocationTag(id: $id) { data { id } } }
mutation deleteParameterizedPermission($id: ID!) { deleteParameterizedPermission(id: $id) { data { id } } }
mutation deletePersonTag($id: ID!) { deletePersonTag(id: $id) { data { id } } }
mutation fixCommentText($commentId: ID! $text: String!) { updateComment(id: $commentId data: { text: $text }) { data { id } } }
mutation increaseNotAPlaceCount($pictureId: ID!) { increaseNotAPlaceCount(id: $pictureId) }
mutation like($pictureId: ID! $dislike: Boolean) { doLike(pictureId: $pictureId dislike: $dislike) }
mutation login($username: String! $password: String!) { login(input: { identifier: $username password: $password }) { jwt } }
mutation mergeCollections($targetId: ID! $sourceId: ID!) { mergeCollections(targetId: $targetId sourceId: $sourceId) }
mutation mergeKeywordTags($targetId: ID! $sourceId: ID!) { mergeKeywordTags(targetId: $targetId sourceId: $sourceId) }
mutation mergeLocationTags($targetId: ID! $sourceId: ID!) { mergeLocationTags(targetId: $targetId sourceId: $sourceId) }
mutation mergePersonTags($targetId: ID! $sourceId: ID!) { mergePersonTags(targetId: $targetId sourceId: $sourceId) }
mutation pinComment($commentId: ID!) { updateComment(id: $commentId data: { pinned: true }) { data { id } } }
mutation postComment( $id: ID! $author: String! $text: String! $date: DateTime! $parentCommentId: ID ) { createComment( data: { author: $author text: $text date: $date picture: $id publishedAt: null parentComment: $parentCommentId } ) { data { attributes { text } } } }
mutation setPicturesForCollection($pictureIds: [ID]! $collectionId: ID!) { updateCollection(id: $collectionId data: { pictures: $pictureIds }) { data { id } } }
mutation unpinComment($commentId: ID!) { updateComment(id: $commentId data: { pinned: false }) { data { id } } }
mutation unpublishPicture($id: ID!) { updatePicture(id: $id data: { publishedAt: null }) { data { id } } }
mutation updateArchive($archiveId: ID! $data: ArchiveTagInput!) { updateArchiveTag(id: $archiveId data: $data) { data { id } } }
mutation updateCollection($collectionId: ID! $data: CollectionInput!) { updateCollection(id: $collectionId data: $data) { data { id } } }
mutation updateKeywordName($tagId: ID! $name: String!) { updateKeywordTag(id: $tagId data: { name: $name }) { data { id } } }
mutation updateKeywordSynonyms($tagId: ID! $synonyms: [ComponentCommonSynonymsInput]!) { updateKeywordTag(id: $tagId data: { synonyms: $synonyms }) { data { id } } }
mutation updateKeywordVisibility($tagId: ID! $visible: Boolean!) { updateKeywordTag(id: $tagId data: { visible: $visible }) { data { id } } }
mutation updateLink($id: ID! $data: LinkInput!) { updateLink(id: $id data: $data) { data { id } } }
mutation updateLocationName($tagId: ID! $name: String!) { updateLocationTag(id: $tagId data: { name: $name }) { data { id } } }
mutation updateLocationSynonyms($tagId: ID! $synonyms: [ComponentCommonSynonymsInput]!) { updateLocationTag(id: $tagId data: { synonyms: $synonyms }) { data { id } } }
mutation updateLocationVisibility($tagId: ID! $visible: Boolean!) { updateLocationTag(id: $tagId data: { visible: $visible }) { data { id } } }
mutation updatePersonName($tagId: ID! $name: String!) { updatePersonTag(id: $tagId data: { name: $name }) { data { id } } }
mutation updatePersonSynonyms($tagId: ID! $synonyms: [ComponentCommonSynonymsInput]!) { updatePersonTag(id: $tagId data: { synonyms: $synonyms }) { data { id } } }
mutation updatePicture($pictureId: ID! $data: JSON!) { updatePictureWithTagCleanup(id: $pictureId data: $data) }
